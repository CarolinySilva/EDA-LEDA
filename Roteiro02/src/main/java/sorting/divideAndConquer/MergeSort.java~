package sorting.divideAndConquer;

import util.*;

import java.util.Arrays;

import sorting.AbstractSorting;

/**
 * Merge sort is based on the divide-and-conquer paradigm. The algorithm
 * consists of recursively dividing the unsorted list in the middle, sorting
 * each sublist, and then merging them into one single sorted list. Notice that
 * if the list has length == 1, it is already sorted.
 */
public class MergeSort<T extends Comparable<T>> extends AbstractSorting<T> {

	private T[] arrayTemp;

	@Override
	public void sort(T[] array, int leftIndex, int rightIndex) {

		if (Util.validation(array, leftIndex, rightIndex)) {
			this.arrayTemp = Arrays.copyOf(array, array.length);
			if (leftIndex < rightIndex) {
				int middle = (leftIndex + rightIndex) / 2;
				sort(array, leftIndex, middle);
				sort(array, middle + 1, rightIndex);
				merge(array, leftIndex, middle, rightIndex);
			}

		}

	}

	private void merge(T[] array, int leftIndex, int middle, int rightIndex) {
		for (int i = leftIndex; i <= rightIndex; i++) {
			arrayTemp[i] = array[i];
		}
		int i = leftIndex;
		int j = middle + 1;
		int k = leftIndex;
		while (i <= middle && j <= rightIndex) {
			if (arrayTemp[i].compareTo(arrayTemp[j]) < 0) {
				array[k] = arrayTemp[i];
				i++;
			} else {
				array[k] = arrayTemp[j];
				j++;
			}
			k++;
		}
		while (i <= middle) {
			array[k] = arrayTemp[i];
			k++;
			i++;
		}

	}
}